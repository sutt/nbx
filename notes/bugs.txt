6.5 - 6.6

[ ] add a [integration] test - selenium based driver
    what's the minium amount of selenium we need for this?
    ->https://selenium-python.readthedocs.io/getting-started.html

    [x] setup
        [x] activate virtualenv
        [x] new repo -> misc/selenium-demo
    
    [x] test simple selenium?
        [x] driver
        [x] in jupyter
    
    [x] test applying selenium to test_setup.bat outcome

    [x] demonstrate jupyter based full send/receive answer
        [x] how to edit the input cell content?
            action = ActionChains(driver)
            action.send_keys("ssss")
            # action.perform()
            action.key_up(Keys.SHIFT)
            action.perform()

        [x] new stage
        [x] launch notebooks from home screen
        [x] close second tab -> driver.quit()
        [x] two drivers
        [x] new stage and test:
            [x] send
            [x] receive

            -> stage/selenium.8/
            -> misc/selenium-demo/jupyter-3.ipynb

    [x] bug on selenium driven test:
        cell index is off by one:
            selected_cell
            -> this occurs because we're clicking run this cell
               and that doesn't bring focus to the cell below

            [x] what about shift+enter
                https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains
                -> works:
                    action.key_down(Keys.SHIFT)  #.perform()
                    action.send_keys(Keys.ENTER)
                    action.perform()

    [x] devise test of nbx functionality for automated testing
        [x] get original values
        [x] get new values

    [x] create script based approach
        [x] understand test/ dir structrue
        [x] call mkstage + test-setup.bat from subprocess
        [x] open drivers + navigate
        [x] time.sleep methods
        [~] what happens on window.reload() events?
            [x]  do i need to get all elements again?
            -> i do this anyways because
        [x] run commands in each driver
        [x] do i need to run with admin console? -> no
        [x] replace test-setup.bat with Popen
            
                https://docs.python.org/3.7/library/subprocess.html#replacing-os-popen-os-popen2-os-popen3
                
                subprocess.CREATE_NEW_PROCESS_GROUP
                A Popen creationflags parameter to specify that a new process group will be created. This flag is necessary for using os.kill() on the subprocess.

        [ ] tear down procs
            [x] close driver
            [x] kill nb servers
            [ ] delete stage
                
                When running proc.terminate() i get on rmdir():
                    PermissionError: [WinError 5] Access is denied: 'test_stages\\basic_1\\remote\\main\\.git\\objects\\70\\38d0683bf2c616141eff86dfb53d2694f3bbbb'

                    i end up with multiple open process (12) under the terminal in Task MAnager
                
                when running os.kill() i end up breaking the test running

                    but i end up with no jupyter / python processes running in TaskManager

            [ ] why does test no longer work?

        [ ] pytest compatible
            [ ] making selenium windows run in background / invisible?
                - another desktop?

    [ ] develop more complex testing template
        [ ] class + function to orchestrate jupyter actions
            [ ] verify expected input/ output
            [ ] poll and wait for element to update
        [ ] develop a separate file with the orchestration commands
        

[ ] add scripts for the batch files to be unix compatible

[ ] bug: nbx doesn't work when manually pressing arrow next to cell 

    "run this cell" button

    this occurs because IPython.notebook.get_selected_index() is off

    [ ] a mini hack is to:
        - check if the cell below has send_answer()
        - if so, then don't subtrack one

        [ ] how to check the input of other cells

[ ] bug: receive_answer() still uses cell content parsing for selected index

    change this to js selected_cell

        nbx/merge.get_answer()
            has `term=receive_answer` not a cell position

6.3 - 6.5

[x] the template notebook in stage_utils/bare has a bad path
    change the 
    sys.path.append('../../') 
    ->
    sys.path.append('../../../') 

[x] accidently ran these in nbx root:
    need to unset them    
    git config branch.autosetuprebase always
    git config branch.autosetupmerge true
    [x] how to unset variables
        [x] does unset locally override the set globally?
        [x] unset mistaken set from nbx root git

[x] was there a virtualenv for this?
    -> in venvs/ 
        > venv1\Scripts\activate

[x] stage1 -init.clone
    git inits, git configs, git push/clone
    [~] test that user-setup works and answer moves
        -> doesnt work
    [x] test that pull.rebase is configured properly
    [x] git clone for student, git push for teacher

    [x] cloning problem bug:
        -> solved via going to the remote and:
            -checking out master, then
            -checking out dummy again (Still as a new branch)

        Cloning into 'student'...
        done.
        warning: remote HEAD refers to nonexistent ref, unable to checkout.

[x] stage2: - `copy.lib`
    [x] adding nbx directly to repo
        [x] cp the lib
        [x] change imports
            [x] prove it's a local import
        [~] cp without __pycache__
    [x] edit the base nb

    [x] test with conda activate

[x] remove the untracked content git highliughts

    git config -f .gitmodules submodule.misc/example-repo.ignore untracked
    
    [submodule "stage_utils.bare.teacher"]
    	path 	= stage_utils/bare/teacher
	    ignore = dirty

[x] stage3: - `multi.book`
    [x] notebooks in subdirectories
    [x] configure different user
        [x] how does the author field in the git message get set?

        [x] what variables to adjust
            git config user.name Teacher 1
            git config user.email teacher@opensource.net
        [~] do these / what settings allow push/pull access]
            -> maybe, it's a little weird

[ ] stage4:
    [ ] already existing .nbx/master.json

[ ] bug: student [accidently] runs sends_answer()

    this will cause remote to have conflicting histories next time the teacher pushes
    - this won't happen without write access

        remote: error: refusing to update checked out branch: refs/heads/master
        remote: error: By default, updating the current branch in a non-bare repository
        remote: is denied, because it will make the index and work tree inconsistent
        remote: with what you pushed, and will require 'git reset --hard' to match
        remote: the work tree to HEAD.
        remote:
        remote: You can set the 'receive.denyCurrentBranch' configuration variable
        remote: to 'ignore' or 'warn' in the remote repository to allow pushing into
        remote: its current branch; however, this is not recommended unless you
        remote: arranged to update its work tree to match what you pushed in some
        remote: other way.
        remote:
        remote: To squelch this message and still keep the default behaviour, set
        remote: 'receive.denyCurrentBranch' configuration variable to 'refuse'.

[ ] potential bug: student (or teacher) notebook is not trusted:
    
    what does that effect?
        - probably plugins like Youtube
        - does it effect
        
        [ ] research notebook trust

[ ] refactor nbx2 as nbx
    [ ] need to adjust all the staging scripts

    
[ ] bug: student repo is ahead of the teacher repo

    occurs when teacher has no prior commits, while student has one: tracking the primary notebook at its initial state.
    
    error message:
    "fatal: refusing to merge unrelated histories"

    [ ] quick fix: read the most recent commit on entry, then track the commit message of all subseqeunt ones. 

        This will provide a warning to user that history divergence will cause a fatal error to all functionality and some [manual] fixes.

            e.g. git pull origin master --rebase=true

    [ ] is there a way to switch branch to have no history and enable merge?
        [ ] what would this do to the notebook being edited?
        [ ] what would this do to other tracked/nontracked content within the repo?
        [ ] could we seemly witch back the active working branch?

[x] need a way to include the tests in repo itself
    [x] remove the git repository

[ ] utility to add nbx to a repo
    [ ] need to clear out __pycache__

[ ] get some editable installs with pip and prep package preparation

[ ] looking into notebook trust issue
    [ ] is this about OS-user level, or git user?

[ ] the overwrite modal problem came up

    [ ] reproduce the error by:
        - simulate networking latency
        - say through a settimeout

[ ] probably the most high priority bug is starting 
    - short term fix: trigger warning when not finding a .git directory is available files at: 
        - python server cwd (?)
        - or notebook directory cwd (?)
    - long term fix is to move back in the file path untill you find a git repo...
        - need to understand how notebooks in this form work for both shelling to git and reading/writing .nbx/master.json

[ ] the coolest thing to add is getting student solutions to be available

[ ] can we get this to work on colaboratory?

[x] git pull issue:

    solution description:

        the student's "git pull" functionality doesn't work under the following conditions:
            1.) the [global] git config has pull.rebase = true
            2.) the notebook is tracked in the git repo
                2b.) a nb save method has been called, leading to a modification of the tracked notebook.
            this leads the the followin error:

                error: cannot pull with rebase: You have unstaged changes.
                error: please commit or stash them.

        simply chaning the command to override the user's configured git-pull behavior (pull-rebase -> pull-merge) via:
            
            git pull {remote_name} master --rebase=false

        this has the benefit of not modifying the system,global, or even local git config.


    description:    
        when
        >git config --get pull.rebase 
        is "true", the git pull aspect will not work automatically

    other useful commands:
    >git config --global pull.rebase true
    >git config pull.rebase true
    >git config --list
    >git config --list --show-origin
    >git config --global --get pull.rebase
    >git config --local  --get pull.rebase

    notes:
    - the global git config lives in: ~/.gitconfig
    - the local git config lives in [repo]/.git/config

    [x] build a test to reproduce the issue
        
        [x] how to use the staging utils to setup a stage / test
            -> here's how:
                >copy stage_utils/bare into a new dir in stage/
                >cd into that new dir
                >run # "C:\Program Files\Git\usr\bin\bash.exe" mkstage.sh
                    this setups the git relationship
                >conda activate
                    otherwise python2.7 will run
                >run user-setup.bat
                    this will open up separate jupyter notebooks
                    -> 9000:teacher
                    -> 9001:student

        [x] show it working well the first time

        [~] now show it breaking with the same workflow
            [x] student repo gets config setting changed

            -> hmmm it still works??

        [x] show it working again, verify pull.rebase is still true

        [x] demo how to make sure pull.rebase triggers?
            
            git config branch.autosetuprebase always
            git config branch.autosetupmerge true
            
            git config --get branch.autosetuprebase
            git config --get branch.autosetupmerge
                -> for me these are both unset

            [x] try with all 3 set on first answer_receive()
                -> still works

                git config pull.rebase true
                git config branch.autosetuprebase always
                git config branch.autosetupmerge true

            [x] it's probably the code --wait commands
                -> nope
                if not: code is the same as vim in this capacity, no?

                git config core.editor "code --wait"
                set EDITOR="code --wait"
                set VISUAL="code --wait"

                [x] try with just the 1st command, and previous 3
                    git config --global core.editor "code --wait"
                
                [x] how to set variables on windows? or will git execute in bash?
                    ->set VAR='cmd 1 2'
            
            [~] research the git config musings:
                [x] do you have to unset before setting?
                    -> no
                [x] how can i see a pull.rebase happen?
                  

        [x] is the answer b/c the notebook is added?
            -> YES!!
            -> the answer is:
            >git pull origin master --rebase=false

        final solution: -------------------------------------

        [x] repro the step:
             [x] carefully add nec steps with stage creation
                - stage the notebook
                - make sure unstaged changes occur on student repo via "save" action in notebook
             [x] also accumulate adverse git configs
                -> just git config pull.rebase true
             [x] demonstrate in notebook breaking
             [x] test with first time send_answer()
             [x] test manual correction
             [x] test with second time send_anser()

             - note: this is also makes

        [~] does this only happen on git pull.rebase=true repos?
            [~] can you merge incoming changes to a modified, unstaged-changes file locally?
            -> seems like yes, as it always worked before
             
        [x] apply the update solution
            [x] verify it works on a repo of the previous notebook

        disreard rest of the items -------------------------

        [~] build up a set of ways to:
            - diagnose the issue
            - fix the issue
            - reproduce the issue
            - check if there is user error:
                - notlaunching notebook server at root of git repo

        [~] try getting the error with the Mac
            [~] find the example repo
            [~] reset the example repo
            [~] test it
            [~] if no luck, try running the script for installfest

        [x] any anomalies in how I ran it?
            [x] goto recording

        [~] what else could cause the issue?
            - not having the nbx folder within the repo itself
            - git hooks for CRLF only in Windows <-> Mac?
            - am i not setting things correctly with duplicate entries in git config --list?
                - e.g. have to unset first
            - something else in here: https://git.generalassemb.ly/SEIR-32221/installfest/blob/44596845e2d8742ef704d8ee253c9af6b0e65aa3/scripts/git.sh#L40
                git config --global core.editor "code --wait"
                export EDITOR='code --wait'
                export VISUAL='code --wait'
            - maybe something to do with repo owner permissions?


    [x] how to set the setting (pull.rebase)
        -> git config --global pull.rebase true


4.12

[x] build staging utility to setup  [TODO-1]
    
    [x] copy in example
        [x] strip contents
        [x] remove history

    [x] bash script which creates
        [~] pass in arguments
        [~] destination vs source arguments 
            (relative to script location or calling location?)
        [~] can remote paths be relative? 
            - if not: must script git remote set-url 
            - this will hard code in absolute path to current dev position
                - or can parse the path (via $pwd) and append to it

[x] build example unit test [TODO-2]
    [x] use stage_scripts to stand it up / reset it
    [x] pytest?
    [x] what compenets can we test first? (w/o js support)

    do a test of nbx.merge.give_answer
        [x] setup pytest
        [~] question: when we chdir and a test fails, how do we get back to the original dir?
            -> don't delete if test fails
            -> can build a new test_stages-GUID each time we run, and delete the old
            -> need to remove all terminals from pointing into that dir you want to delete

[ ] feature: index of cell to send via js (instead of parsing ipynb)
    [ ] merge.give_answer needs parameter for this
    [ ] find send cell index from js
    [ ] write a test that fails for old way, works for new way

[ ] add optionality to staging [TODO-3]
    [ ] extra history
    [ ] exisiting .nbx folder
    [ ] github functionality


[ ] build example integration test [TODO-4]
    [ ] use subprocess to launch 
    [ ] use selenium to script the notebook

[ ] make pip package [TODO-6]
    [ ] include tests optionally
    [ ] virtualenv + requirement.txt
        [ ] jupyter version min + max
    [ ] setup.py

4.11

[x] nbx2.receive_answer() doesnt git pull (sometimes) [#1]
    [x] it does autosave
    [x] ImportClass? why do we do that? 
        -> it's a trick to execute the code in a simpler way
    [x] it does work on nbx.receive_answer()
    [x] why does it work on nbx?
        - does output on a print statement on nbx.receive_answer()
    [x] console.logging
        - notice that stdout subprocess runs show up in terminal running jupyter notebook
    [x] changing ImportClass.gitcomm_get_answer(remote='origin')
        - works sometimes?
    [x] verify git log always populates with this command
        - 3/3
    -> Closing, appears to work after switching remote=origin to default parameter


[x] nbx2.receive_answer() doesnt work without a blank cell above? [#2]
    -> resolved with multiple issues handled, mainly about setting a callback for after:
        python kernel exectures merge_cell
        to *then* call notebook reload (and then flash is call after)

        the solution eleiminated the need to do setTimeout for notebook reload

    [x] may be related to #3 -> prolly not
    [x] try w/w/o blank cell 3x
        -> works
    [x] looks like the problem is finding the index of the cell calling receive_answer:
        In[5]: #aa
        In[6]: nbx2.receiver_anser()       <- running this cell
        In[7]: #bb                         
        In[8]: #cc                         <- cell insert here
        In[8]: #nbx2.reveive_answer()

        -> but In[6] will get highlighted and scrolled to

    [!] might be finding the cell index problem

    [x] test 3x-push/pull without secondary target
        -> fails.
    [x] test 3x-push/pull hypothesis: writing to ipynb works, something like reload / timing is wrong
        -> confirmed
    [x] change timing to see if it's timing:
        from: setTimeout(loadFunc, 500); setTimeout(basicFunc, 700);
        
        to:   setTimeout(loadFunc, 500); setTimeout(basicFunc, 1700);
            -> breaks

        to:   setTimeout(loadFunc, 1500); setTimeout(basicFunc,2700);
            -> breaks
    
    [x] watch logging with big time gap:
    
        to:   setTimeout(loadFunc, 10000); setTimeout(basicFunc,15000);
            -> works:
        
        immediately to console:
                    ra: 0th
            VM567:7 ra: 2nd
            VM567:21 nbx2.ImportClass.gitcomm_pull_answer()
            VM567:26 nbx2.ImportClass.merge_get_answer("puzzles.ipynb")
            VM567:47 after load
            VM567:75 done with theRest()

        to:   setTimeout(loadFunc, 5000); setTimeout(basicFunc,5500);
            -> works
            -> it's not about basicFunction (flashing/scrolling)
            -> so it's all about timing of loadFunc
                - this is supported by the idea that the ipynb contains the insertion even when it doesnt appear in browser
            -> can we verify it's git_pull or merge that is off?

    [ ] how can we make preceeding functions blocking?
        - an issue here is that the preceeding commands call to python kernel...
            via IPython.notebook.kernel.execute(py_cmd)
                and these immediately return a guid
                    so this function will quickly resolve
        - this should OK for making git_pull resolve before cell_merge is run as python kernel GIL will block
        - a fix is to call into python kernel via js to see if it finished merge
            [ ] how do we access python kernel values in js?
        - survey of kernel methods/props:
            
            IPython.notebook.kernel.last_msg_id 
                -> returns guid froma call to kernel

            IPython.notebook.kernel._msg_callbacks

            IPython.notebook.kernel.last_msg_callbacks.shell_done
                -> false while waiting
                - but we cant get our own kernel.execute(s, cb) js calls to get into the callback pool
                    - nor can we even get a callback to run
                
                src-docs:
                https://github.com/jupyter/notebook/blob/bc28d6123117c3c733697e27e9d4bd71d7f0c46b/notebook/static/services/kernels/kernel.js

                sut_callbacks = {shell:{reply: () => console.log("why reply")}}
                IPython.notebook.kernel.execute("time.sleep(10)",sut_callbacks)

               mr_callbacks = {
                shell : {
                  reply : execute_reply_callback,
                  payload : {
                    set_next_input : set_next_input_callback,
                  }
                },
                iopub : {
                  output : output_callback,
                  clear_output : clear_output_callback,
                },
                input : raw_input_callback
               }



[ ] nbx2.receive_answer() triggers notebook state conflict [#3]
    [ ] may be related to #2
        -> this should work once #2 is fixed b/c the browser's state and ipynb representation should match
            - possibly not without pretty formatting
        -> but it's still important to understand the built-in switch
            for "race condition" type areas
    
    [x] steps to reporduce:
        1. receive a new answer (freshly pushed)
        2. the received answer doesn't display in browser
        3. hit notebook save
            -> this occurs b/c git_pull + merge have occured and put the new cell into the ipynb, 
                while the browser hasn't loaded this new ipynb

        dev tools message:
        react_devtools_backend.js:2430 Last saving was done on `Sun Apr 11 2021 10:27:05 GMT-0400 (Eastern Daylight Time)`(load-success:2021-04-11T14:27:05.641604Z), while the current file seem to have been saved on `2021-04-11T14:27:06.360901Z`

            - comes between `ra 0th` and `ra 2nd` messages

        The notebook file has changed on disk since the last time we opened or saved it. Do you want to overwrite the file on disk with the version open here, or load the version on disk (reload the page)?
            
            -> options: Overwrite | Cancel | Reload

    [ ] appears related to pretty print formatting of the json
        [ ] account for formatting type in each state:
            [ ] initially created notebook
            [ ] save notebook with new cell
            [ ] receive_answer notebook

    [x] a way to view a diff on conflicting notebooks:
        -message pops up:
        >cp nb.ipynb old.nb.ipynb
        -click overwrite
        >git diff --no-index old.nb.ipynb nb.ipynb
        -but this will be deceiving...wrong pretty print and wrong indentation cause issues:
            - instead we'll set them up to use the same formatting:
            >cp old.nb.ipynb old.nb.json
            >cp nb.ipynb new.nb.json
            - open both in vscode > command pallete > format document > save as:
                old.formatted.nb.json, new.formatted.nb.json  (respectively)
            >git diff --no-index old.formatted.nb.json new.formatted.nb.json

    [x] a proper diff reveals there's only one cell difference in the notebook
        -> to fix we'll probably need to:
        a.) match the notebook formatting style, or(?)
        b.) turn off the check that runs that message?
            