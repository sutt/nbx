	
Overview / Main Points
------------------------	
		nbx - notebook exchange
		
		 - pair programming without the clunkiness of working on someone else's computer.
		
Todo:
-------------------------

	2.7

	1.31

		how to add push rights to everyone on git automatically?

	1.20

		below, we satisfy the introspection / debugging / error reporting problems of nbx2 architecture, but we still can't deal with the timing problems, that can only be helped by well written js

		nbx2 debugging:
			- because calling python from js 
			- send stdout / stderr to a log file in .nbx dir
			- psuedo code for receive_answer()

					nbx_js.py:
					import sys
					sys.stdout.to('.nbx/debug.txt')

					def pull_answer()
						gitcomm.pull_answer() # now this prints to log even 

					nbx2.py:
					def receive_answer():
						
						with open('.nbx/debug.txt') as f:
							f.write('starting reeive_answer)

						js = '''
						
						...
						
						IPython.kernel.execute("nbx_js.pull_answer()");
						
						...

						// also we can log to console for err reporting with js methods
						console.log(my_err);

						'''

						IPython.display(Javascript(js))

						# actually this will run before the js is exececuted,
						# so we'll need to call the err reporting in a separate
						# subsequent cell

						with open('.nbx/debug.txt') as f:
							if 'Error' in f.read():
								print(f.read())  # can show user what happend in js-executed python

	1.19

		
		[x] refactoring
			[x] .cpr -> .nbx
			[x] cells.json -> master.json
			[x] cpr/ -> nbx/ (git mv)
			[x] cpr.py -> frontend.py
			[x] clean up misc code
				[x] nbx.py header
			[x] remove misc functions
			[x] ipython blocking remove
			[x] all 'local' to origin
			[~] my local directory: cpr -> nbx
			[x] test locally
		
		[ ] updating from the refactor
			[ ]	push new nbx module into nbx-demo-1
			[ ] redo the gif
					[ ] instead of using the full puzzles nb, use 
							"Receive answers here"
			[ ] redo docs where nec. eg. import cpr -> import nbx
				[ ] Further explanaition section etc


		user-experience stuff
		[x] fix error message for send_answer to reminder about saving
			[ ] verify
		[ ] better error message if no answer is present
		[ ] add error message to common errors:
			"if you believe this is untrue, run with debug=True to get a full stack trace"
		[ ] b_save in nbx is erroneous			
		[ ] better doc strings for nbx methods
		[ ] get rid of confusing names
		[ ] add debug options:
			we want to print to user's notebook instead of raising an exception (which bring a long stacktrace) when it's likely/possible that user error is involved. Otherwise still raise the exception
		

		[ ] does this only work b/c master.json is one line? 
			if we pretty printed the json would this create merge problems?

	1.18

		[x] build screencast
			[x] with ppt?
			[~] with zoom?
			[~] how to edit?
			[x] how to make a gif?
				https://lifehacker.com/the-complete-guide-to-making-animated-gifs-1503276993
				https://giphy.com/create/gifmaker
				https://image.online-convert.com/convert-to-gif

		[x] build reademe for cpr-dev
			[x] embed gif?

		[ ] readme for nbx-demo-1

		[ ] start building docs
			[ ] faq for troubleshooting
			[ ] quickstart
				- don't forget to save
			[ ] explanation of what's happening

		[ ] start building tests
			- one main selenium one
			- use a local remote

		misc:
		[ ]	verbose option for debugging
		[ ] send/receive multiple answers
		[ ] receive answer answer before latest
		[ ] receive answer from specifc user
		[ ] receive answer from all submissions

		cleaning / admin
		[ ] better doc strings for nbx functions
		[ ] refactor cpr to nbx
			[ ] eg. root directory
		[ ] remove other code completes
		[ ] clean up code, remove un nec modules
			[ ] ipython_block in cpr/
			[ ] 
		[ ] switch git repo to nbx

		
		submission feature:
			.nbx/<git user.name>.json with your name
			
			[ ] cells.json -> master.json (according to master branch)
			[ ] check_output to git config get user.name for submitted answers
			[ ] receive answer from specifc user
			[ ] receive answer from all submissions

		3 use cases:
		 - master broadcast/multi-client-listen flow
		 - two way exchange with one master, and multi-client
		 - pair programming / group programming

	1.17

		rehearse presentation:
					
					+ https://github.com/sutt/nbx-demo-1

					+ insturctions for solver:
						- launch jupyter in root of clone repo. (nec?)
						- make sure to save after the first receive_answer()

					+ don't forget to CTRL+S 
							- BEFORE RUNNING send_answer but,
							+ AFTER TYPING send_answer

					+ reset ws:
					  >git rm -rf .cells
						>git commit -m "reset ws"
						>git push
					  reclone:
						 - have to shut down jupyter notebook in the dir to delete the dir; or just take cmd out of that dir
						 >git clone https://github.com/sutt/nbx-demo-1 demo-1-teacher


				- what's next?
					- prezi for who?


		further on:

			- we could build two demos: demo-1: two player, demo-2: self play like i do
			- can add a more advanced demo with explainers

			[x] screenshot gif

			[ ] add readme to nbx-demo-1

			[ ] verbose option, to display some debugging info if it doesn't work at first
			
			[ ] add last-save reminder functionality
				- check file modified time vs current system time.

			[ ] could add a sys.stdout redirect in import class to log errors
				- this only needed for the nbx2 version
			
			[ ] what if send_anser hangs? timeout?

			[ ] test with untrusted
					[ ] how to create untrusted?
					[ ] for send
					[ ] for receive
					[ ] status following git clone?

			[ ] what is the diff of functionality b/w nbx and nbx2?
				- nbx requires at least one arg (possibly false if only 1 notebook?)
				- nbx2 can save before actions
				- nbx2 can conceivably solve latent bugs easily by passing into the kernel relevant data like nb_name, nb_path, cell index
					-> these solve or ameliorate many hacks and user-demands created by python kernel being ignorant about notebook's current DOM state or filesystem state.

		[ ] List out limitations
				- searches for string to find answer; e.g. answer inserted at bottom with second receive_answer()
				- no bottom cell padding bug (?)
				- nbx2.get_answer autocompletes; hide that method and others (import module instead?)
				- notebook must be at root of git repo
				- must run jupyter notebook at root (?)
				- can only send one anwser at a time
				- first try bug? -> hasn't surfaced yet
				- file access conflict when autosave occurs at same time (?)
				- can only get most recent answer
				- can only work with jupyter run from repos root (?) (unless nb path passed in)
				- relies on github auth, how can you check / correct that if it doesn't work?
					- have an input field to enter password?





	1.16

		nbx2: send_answer/receive_answer
		script searches for bottom-most instance of that string in a the nb, thus your answer prolly appeared at the bottom

		[x] base camp on git
		[x] get a new repo setup mirroring book4.ipynb -> nbx-demo-1
			[x] add question2 as well
			
			[ ] does this reproduce across sessions? can you reproduce initial start?
				- this could work with branch
			
			[x] puzzles is not trusted? -> click it to trust
			
			[ ] add a reset operation: reset_git.py
				- e.g. copy in a folder to overwrite contents, then rm cells.json?
					-> demos/nbx-demo-1-saved
				- git rm -r .cells

			[x] get it to work for send:
					
					[x] why is cells.json not appearing
						-> can't see python error messages from nbx2

					[x] try nbx.send_answer()
					
						bug here: nb_json = json.load(open(fn_nb, 'r', encoding='utf-8'))

					[x] am i pushing to local instead of remote? -> yes
						-> gitcomm.push_answer(remote_name='local')

			[x] get it to work for receive:
					[x] bug?? - in nbx2, ImportClass.gitcomm_pull_answer() is incorrect, no static method
					-> apparently not for now, but corrected
					-> only impacts nbx2
			
			[x] send_answer(remote='origin') to default

			[x] remove ipython_blocking from root/cpr/

			[x] bring changes into cpr/cpr instead of cpr/demos
				- diff on both demo-1, demo-1-teacher
				- to root
				- remove cruft
				- back to demo
				- what command to replace?
				
				most common, remove cells.json
				git rm -rf .cpr
				git commit -m "reset: ws ready for solver"
				git push

				replace notebook files
				cp -r nbx-demo-1-saved/*  nbx-demo-1/ 
				cd nbx-demo-1

				update the cpr files from cpr-dev to demo-cpr
				cp ../../cpr/* nbx-demo-1/

			

			[x] full up n down
			
			[x] add save verbiage to puzzles.ipynb

			[x] re-basecamp demo workspace
				[x] test twice
				[x] complete re-clone

			[x] update cpr-dev git repo

			11:30 - 12:00 wrap:
				


	1.15

		colab tips very simlar to what nbx functionality / needs
		https://colab.research.google.com/notebooks/snippets/advanced_outputs.ipynb#scrollTo=MprPsZJa3AQF

	1.8
		How to reset state? When would this be nec?
			->just delete .cpr/cells.json and pull/push.
				- if pushed by student, can't be pulled by teacher, right?

		Mainly, I need to:
		- troubleshoot first try bug
		- test with Teng
		- build compelling example
		- test with small group
		- test with class

	[ ] First answer problems
		- always on nb reload correct?

	[ ] Try on github personally
	
	[ ] Test with Teng, how to prepare script
		teacher -> student
		[ ] couple easy answers:
			- first try success?
			- is scroll down working?
		[ ] multimedia plots
		[ ] big answers, loaded text
			- timing works?
		reset scripts
		[ ] delete .cells.json and push/pull


	
	1.7
		Random thought on git (in general):
			merges should be easy when we don't care about losing history, right? we're just creating a "new object" on push

	1.6

	+ what can be done before a new architecture is found?
		  There's problems doing many tests, no? Or is this just defeatist attitude?
			  - it's true that intellisense/debugging and general code editing experience is
				  degraded via the current implementation
				- but almost all unit tests should still work

	+ what else can be done:
		- testing
		- packaging
		- demonstrations
		- extra functionality: e.g. git_root, clear_commit, etc...

	+ some other questions:
		- which function uses timeouts? does this change when 


	12.31
	
		"ship ship ship"
		[x] do we need to use ImportClass? -> no
		[x] build js-based scripts for give + receive
		[x] commit it
		
		- major things holding us away from v0.1
			[ ] little details like notebook could be in a dir, find_git_root, etc
			[ ] api specified with options
				[ ] how to 
				[ ] mulitple send answers
		 - other important things:
		    [ ] don't search for cell input term, use cell selection index
			[ ] setTimeout's in nbx2.get_answer()
			[ ] clear-send_answer() what if student accidentilly does send_answer()? and wants to back out of that.
	
	12.29
		[x] get a commit in with new hack
			
			[x] clean up directory
			
			[x] finish up books for now:
				[x] MiscCprJS.ipynb
				[x] JsToPythonScope.ipynb
				
			[~] nb to demo new functionality of no notebok name
			
		[x] next commit
			
			[~] demo in book2: nb_name, both specified and implicit
			
			[x] save functionality included
				- with just a timeout for now?
					-> this won't work because we can't do js first
					
				- ultimate hack: execute neccesary python 
				  from kernel.execute with the sequential-js pattern
				
			
		
		[ ] vscode dev settings:
		
			[ ] no autocomplete for local variables
			
			import problems (have to be fixed with __init__.py)
			https://github.com/Microsoft/vscode-python/issues/3840
			https://github.com/Microsoft/python-language-server/issues/887
			https://github.com/microsoft/python-language-server/issues/1156
			
	
	12.28
	
		[x] finish up on the js->python bug; if it's not resolved invent a hack
		
			[x] try get_ipython() solution
				[x] find the line of code
				-> didn't work
				
			if that doesn't work
			[x] commit problem books
				[x] add links to other people with the problem
				[x] add proposed solutions:
					- onLoad e..g in notebook's call to from nbx import get_answer() just drop it into the kernel then!
					-> doesn't work, globals aren't shared across modules
				
			[x] add a hack solution:
				- by default take the "last" .ipynb file (so no argument)
				- and an argument
				
			[x] are there more spots in the workflow where we need js->python messaging? postSave?
		

	12.26
	
	Thoughts:
		+ blog post - jupyter based dev
	
	[x] can we add student and teacher repos by gitignoring the .git folder?
		-> yes with a little care:
		> add `teacher/teacher-cpr/.git` to .gitignore
		> git add teacher/teacher-cpr/ (good: adds all content sans .git)
		> git add teacher/             (bad: adds as a submodule)
		-> note: we use remote=local for these repos
		[x] add new demonstration of functionality.
	
	[z] very basic git-push and git-pull
		- as check_output call to bash script?
			[x] run a time.time() recorder to see significant lag between
				pre/post git-action
		[x] subprocess calling directory experiments
		
	[x] morning commit: 
		[x] adding gitcomm
		[x] subproc
			[x] add only .cpr
			[x] capture some check_output 
		[x] remove .sh scripts
		[x] demo: teacher: answer-send, student: answer-receive 
		
	[ ] second commit
		[ ] notebook describing gitcomm functionality
			[ ] why doesn't git push print out?
				-> looks like cursor gets active as soon as cmd is run
		[~] send notebook name module
		[ ] some unittests for cmd_adj
			-> need to name files test_* 
			[x] run pytest for python3?
				-> conda activate base (which give python PATH priority)
		[ ] git mv cpr.py -> frontjs.py
			[ ] need to correct all the notebooks using cpr
		
		[x] one function for suproc in push_answer(), pull_answer()
			[x] need to adjust term in give/get _answer
			
		[ ] need a log file, printing to notebook will just get overwritten.
		
		[x] take all three actions to one function:
			cpr.reload_nb(), merge.give_answer(), gitcomm.answer_push()
			-> in nbx?
			
	[x] dev settings
		[x] exclude __pycache__ from vscode explorer
			-> in settings, under "files.exclude"
		[x] intellisense for vscode can't handle dot imports, e.g. .merge
			-> imported chess workspace settings
			-> added a __init__.py to cpr directory
			-> updated vscode extension		
				Id: ms-python.python
				Version: 2019.2.5558
					->
				Version: 2019.3.6558
		
		
	[ ] how to push/pull from particular commit-shas in git?
		-> maybe just separate branches?
	
	[x] get notebook name from js -> python; pass to give_answer, get_answer
		[x] write it out to a file
		
		[x] breakout session:
			[x] new notebook
			[x] print below but within the same input cell
			[x] parsing the globals() as string
			[~] using a class instatiation
			- can just writeout to .cpr/.nbname?
				-> no: no writing untill all "input-code" is run and then "output/kernel.execute" code gets run
			[x] update push_answer() to specify only cells.json
			
			
			-> this is still giving me problems because js doesn't execute untill all python from kernel is finished?
			
			-> note: if an exception occurs while executing the python, 
				the call to display(Javascript(js)) gets cancelled
				
			- closest issue I've found on this:
			https://github.com/jupyter/notebook/issues/3187
			
				-also:
				https://github.com/ipython/ipykernel/issues/369
				https://github.com/jupyter/notebook/issues/3533
				
				- these should work?
				https://jupyter-notebook.readthedocs.io/en/stable/comms.html
				
				- very helpful
				https://github.com/WorldWideTelescope/pywwt/issues/210
				
					- a pattern here works
					https://github.com/kafonek/ipython_blocking
					
				- another guy, same problem:	https://stackoverflow.com/questions/30902898/ipython-notebook-javascript-retrieve-content-from-javascript-variables
				
				https://github.com/ipython/ipython/issues/7804
				
				- maybe this guy solves it?	https://github.com/jdfreder/ipython-jsobject/blob/master/jsobject/utils.py
				
				-> searching github for "javascript display" gives lots of promising leads
				
				-> can also try multiprocessing example	https://stackoverflow.com/questions/2846653/how-can-i-use-threading-in-python
					
	
	[ ] still need the async call from save_notebook -> merge.write_answer
		- use a polling loop thread in python waiting
		
	[ ] connect student and teacher to a repo and start demo-ing examples
	
	[ ] git specialty functionality
		[ ] how to only add .cpr directory?
		[ ] how to find root of repo?
		
	[ ] add all functionalities: front-end (reload_nb), controller (merge.py) and model-comm (gitcomm.py) into functions give_answer, get_answer
	
	[ ] notebook trust issues:
		[ ] how do nb's downloaded from git end up?  untrusted?
		[ ] how do you convert trust <-> untrust, simplest way possible?
			-> will need to include this instructions
		[ ] untrusted nbs cant execute display(Javascript()), correct?
		[ ] how to check for trust within the notebook?
		[ ] a git hook to trust the notebook?
		[ ] a shell script run via subprocess to trust the script
	
	misc issues
		[ ] git needs password saved
		[ ] send other files in git push/pull
		[ ] multi-notebook support: when there's tow notebook
		[ ] support for forks:
			-> defaults to origin's url, but has
		[ ] we don't want to trust js in output-section of an answer cell:
			e.g. IPython.kernel.execute('os.rmdir("/");')
		
	cells.json schema
		[ ] multinotebook support
		[ ] ordered answers
	


	12.24
	
	Thoughts:
		+ is git going to be able to merge cells.json well?
			- is there a force --local or force --remote merge option?
			- what kind of situations break merge? when there's multiple
			  of the same cell?
		+ do we have to pull before pushing?
			- only when there's 2-way pushing, correct?
		+ there's two methods of operating: 	
			1-to-many teacher->students
			1-to-1:   student<->student "pair programming"
		
	
	[x] Finish commit of merge.py functionality
		[x] add merge.py
		[x] add .cpr
		[x] delete extra notebooks
		[x] add BasicMerge1.ipynb
			[x] matplotlib example
		[x] add ParseJson1.ipynb
		[x] cleanup directory, assets
			[x] demo.ipynb, demo2.ipynb to own directory
			[x] fix calls in ParseJson1
			[x] js-debug.js -> assets
			

	
	12.23
	
	Thoughts:
		+ we can either:
			- find the selected cell via text parsing
			- pass it's index from js
		
		+ this is an MVC app:
			
			M: is mostly the .ipynb format, also some counter stuff for nbx tracking indexes
			
			V: the "front-end" javascript aspect like load_notebook, goto cell, and the git pull portion
			
			C: save_notebook and the git commit/push portion allows us to write to the model
			
			-> we don't need to sync the models, only apply a insert at each step
			
	
	[x] basecamp: freshen up dev directory
		- remove submodules
			> add folders to .gitingore
			> git rm -r --cached <folder>
		- remove unnec. notebooks
		
	[x] add animate/select functions to demo_function
	
	[x] two notebooks:
		[x] document reload+goto behavior in detail
		[x] document misc js methods
		[x] move misc functionality out of cpr into cpr.misc
		
	
	[ ] templates.js -> how to load into python strings?
		-> perhaps build one big js function with boolean switches for functionality,
		   and simply set the flags for the switches in python

	
	[x] add save function
		[x] verify the async nature, via console -> yes
		[x] simple promise hack with .then() -> no
		[x] replicate pattern for animate -> no, can't do 
		[x] should we use the passed back promise option? -> idk
		[x] catch events in jupyter? 
			-> can't find 'notebook_saved.Notebook' in python api 
				(this is triggered in save_notebook_success)
		[x] download examples and see if someone else uses save_notebook
			-> printview/main.js has this method
		[x] it's hard to verify if save notebook has completed?
			->debugger
			-> yes, verified via 
		
	[ ] advanced save functionality
		[ ] how do we call back to python (in order to run git-merge) once save_notebook within js is completed?
			[ ] demonstrate if display(Javascript()) is blocking in python?
		[ ] what does the boolean argument in save_notebook(bool) do?
			
	[x] next commit:
		[x] implement save functionality in reload_nb()
		[x] update BasicCpr1
		[x] add templates.js
		[x] put some of the js discoveries in misc cpr
	
	[x] demonstrate rewriting notebook using f.write()
		-> need to save notebook before running give_answer() or get_answer()
	
    [ ] log interesting jupyter bug: when we print js to cell output, jupyter exectutes it
		- realod_nb() prints js to the cell's output
		- bug: when IPython.notebook.load_notebook() is called, 
		
		[x] document the call stack which is executing it:
			- load_notebook_success()
				- Notebook.fromJSON(<bomb_cell_number>)
					-CodeCell.fromJSON(data.outputs, ...)
				
				where data,outputs[0].data: {application/javascript: "var mything = ..." ...}
				? where does the application/javascript thing come from? in my output?
					-> no I never print it.
				
				...
				OutputArea.append_mime_type
		
		- does this occur when notebook is first loaded from jupyter dashboard?
		- does this only occur when you've import display.display and Javascript?
		- does this only occur if notebook is "trusted"? 
			-> for me the nb is trusted by default
			-> how to turn trust off?
		- extra malicious: overwrite the js after load, to hide the problem
		
	[ ] prototype the json insert
		[ ] check the sizeof the json, if too large warn...
		
	[ ] temporarily freeze autosave - to prevent simultaeneous writes to .ipynb
	
	[ ] add configuration files for nbx behaviors, e.g. cell flash
		both workspace and user settings
	

	12.18
	
	[x] re-organize notes
	
	[ ] MVP - demo to brianna level, ideally ready for Jenny on Friday afternoon.
	
		misc
		[ ] kernel.execute()
		[ ] cleanup old HelloCpr notebooks
	
		[ ] javascript aspect
			[ ] load_notebook
			[ ] callbacks
			[ ] save_notebook
			[ ] cell.cursor
			[ ] color.animate
			
		[ ] automate some commit-push and commit-pull
		
		[ ] module skeleton
			[ ] teach
			[ ] get_answer
			
	
	+ Brainstorm future features:
	
		important to do's:
		- is python able to parse these jsons well? for example excaping quotes and images, etc?
	
		- need a way to select only certain cells for broadcast
		
		- note you don't actually git commit/push/pull the notebook itself but a secondary representation which allows another module to insert with union-style particular cells
		
		- so...because there's a secondary [partial] representation that doesn't nec. match either the teacher's or student's notebook, we need a way to consolidate and reconcile both versions (even if they end up in a different order) for git commit.
	
	12.17
	
	Thoughts:
	
		The git merge-hook / merge will be a hairy beast to tackle.
		
		It will probably involve liberal overwriting of metadata and using 
			git add --patch 
		to only commit a certain amount of cells (both input and output)

		How to commit before pull, and then push later, at that point you've added a bunch of extraneous cells and meta-data to "receive an answer without overwriting anything", how do you send one back? Maybe by switching branches? Or maybe creating an intermediate representation of the .ipynb strcture?
			-> whatever way, we can concentrate on teacher broadcast mode where commits only move one way.
			
		Ultimately I should concentrate on an MVP where I know the merge will work, and see how well that works before going deeply into the merge portion.
		
		Once we can validate the UX we'll look at how easy it is to break with a live testing exercise.
		
	Sober Thoughts:
	
		Need to do cell-add outside of the full notebook structure. 
		
		An intermediate representation of exchanged cell would be best
		https://stackoverflow.com/questions/21518381/proper-way-to-wait-for-one-function-to-finish-before-continuing
		

	12.16
	
	[x] get a basic reload, scroll example
		-> via setTimeout()
		
	[ ] explore callbacks, make them work here
	
	[ ] where are static [js] files kept in my python environment?
	
	[x] jquery flash the color?
	
	start looking into git merging and adding patches (only some content from cells)
	
	12.15
	
	[x] put stuff in place for a commit
	
	[x] intellisense for vscode settings
			
	[ ] build an MVP
	
	[ ] build some simple tests like merging conflict example1

	12.15
	
	Thoughts:
	
		One way to get a nice client-side reload after git-pull, is by doing stuff after load_notebook, like reversing the scroll_to_top()
		
		"notebook"/notebook/static/js/scrollmanager.js - has scroll functions
		
		But another way is to write our own extension which mimics the way load_notebook occurs, but changes the bad functionality.

	
	12.14
	
	[x] setup the master git repo for the project
	
	[x] setup the local git-server 
		->resides cpr/remote/main  
		->called remote local in student-cpr and teacher-cpr
		detailed: see notes
			
	
	[ ] setup a testing framework 
	
		[ ] how will we drive changes? maybe just writing the "resultant" json from python instead of using a webdriver on browser to automate jupyter?
	
	[x] setup the module for cpr class
	
	[ ] setup a skeleton for subprocess to git
	
	[ ] investigate libraries for python-git
	
	[ ] create some examples of merge conflicts
	
	[ ] how to do git merge without git-pull?
	
		- for testing processes: we'd operate on files instead repo's; can we go something like that?
	
	[x] try executing window.location.realod() from python
		from IPython.display import Javascript
		Javascript("window.location.reload()")
		
	[ ] copy the pattern in an example nb_ensensions
		
		
	[x] verify the reload command process
	
			[x] compare diffs b/w teacher's book1.ipynb and students' book1.ipynb
				after failed merge
				
				in misc/saved-files as book1-conflicts.ipynb, book1-=good.ipynb
				>git diff --no-index book1-good.ipynb book1-conflicts.ipynb
				
				-> looks like "<<<<<<<<HEAD" is throwing off json
				-> also there was a duplicate 'source' item from teacher writing into cell and student having it blank.
				
	
		[x] find the javascript sources for jupyter
		-> window.location.realod() works to view the newly inserted code, but is clunky and doesn't keep the cursor in position.

			[x] better option for window reloading? -> not at this point
					
				[x] execute those from console
				
		
	
	12.12
	
	[x] set up a dummy remote repo
	[x] open up two terminals, two notebooks, two local repos
	
	[x] understand the delay in RELOAD for notebook
		-> refreshing the page seems to work
	
	[ ] how well do changes to meta-data within a cell work to merge?
		[x] demonstrate some meta-data changing -> need to save from notebook
	
	[x] build a script for add, commit push
	[x] build a script to add, commit, pull
	
	[ ] try a git checkout -- book1.ipynb while live
	
	[x] setup an offline working copy
		
	
	[x] surface some client issues by changing students notebook before the pull
	
	[x] can i run an .sh file in windows terminal?
		->yes, but it shells out and closes too quickly to read
		[x] perhaps it can work for git? -> yes
		
	[x] do i have any extensions installed in base?
		-> a few like conda installed extensions
		


Detailed Notes:
-----------------------------
		
		12.28
		
		+ where is the mian function I care about:
		
			misc/saved-files/ignores/book1-download/main.min.js.download 45571
			
			Notebook.prototype.load_notebook = function (notebook_path) {
			
		+ to select a particular cell:
		
			>IPython.notebook.select(1)
			
		+ a little jquery animate:
			https://stackoverflow.com/questions/190560/jquery-animate-backgroundcolor
		
			function() {
				$(html_cell).stop().animate({backgroundColor:'#008000'}, 300);
			}, function () {
				$(html_cell).stop().animate({backgroundColor:'#FFFFFF'}, 300);
			});
			
			This almost works, but we need to adjust for non-blocking nature of js
			function flip() {
				console.log(html_cell);
				await $(html_cell).stop().animate({backgroundColor:'#008000'}, 300);
				await $(html_cell).stop().animate({backgroundColor:'#FFFFFF'}, 300);
			};
			flip();
			
			>$(html_cell).stop().animate({backgroundColor:'#008000'}, 300);
			>$(html_cell).stop().animate({backgroundColor:'#FFFFFF'}, 300);
			
		+ how to execute synchronously:
			https://stackoverflow.com/questions/5187968/how-should-i-call-3-functions-in-order-to-execute-them-one-after-the-other
			
			"Promises"-> works!
			Promise.resolve($(html_cell).stop().animate({backgroundColor:'#008000'}, 300).promise()).then(function(){
				return $(html_cell).stop().animate({backgroundColor:'#FFFFFF'}, 300);
			});

			
			"setTimeout" -> doesn't work
			function flip() {
				var t = 1000;
				console.log('begin');
				function green (){
					$(html_cell).stop().animate({backgroundColor:'#008000'}, t);
					};
				function white () {
					$(html_cell).stop().animate({backgroundColor:'#FFFFFF'}, t);
					};
				//setTimeout(green, t);
				//setTimeout(white, 2*t);
				function executeAsynchronously(functions, timeout) {
				  for(var i = 0; i < functions.length; i++) {
					setTimeout(functions[i], timeout);
				  }
				}
				executeAsynchronously([green, white], t);
				console.log('done');
			};
			flip();
			
			"Callbacks" -> doesn't work
			function flip() {
				console.log(html_cell);
				function green (callback){
					$(html_cell).stop().animate({backgroundColor:'#008000'}, 300);
					callback();
					}
				function white (callback){
					$(html_cell).stop().animate({backgroundColor:'#FFFFFF'}, 300);
					}
				function final () { console.log('done'); }
				final();
				green( function() {
					white( function() {
						final();
					});
				});
			}
		
		12.16
		
		Reading List for JSON/Git merge
		
			https://github.com/jonatanpedersen/git-json-merge
			
				good, but in nodejs
			https://stackoverflow.com/questions/33122014/git-conflicts-with-json-files
			
			https://weekly-geekly.github.io/articles/244839/index.html
			
				good, but uses a nodejs library to perform json merges
			
			nbdime:
			https://nbdime.readthedocs.io/en/latest/cli.html#merging
			
				specifically merging
				https://nbdime.readthedocs.io/en/latest/cli.html#merging
			
					key: --union
			
			
		ReadingList for Git Merge Conflicts:
		
			https://wincent.com/wiki/Git_merge_conflict_cheatsheet
						
			
		Reading List JS<->Python
		
		https://stackoverflow.com/questions/16852885/ipython-adding-javascript-scripts-to-ipython-notebook/31750982
		
			- look at the lib argument in Javascript
		http://jakevdp.github.io/blog/2013/06/01/ipython-notebook-javascript-python-communication/
			
			- from 2013, method deprecated
		
		Readlist Extensions
		
			 https://jupyter-notebook.readthedocs.io/en/latest/extending/index.html
		
			https://github.com/ipython-contrib/jupyter_contrib_nbextensions
			
			thouhgts on using extensions:
			- or freeload of exisitng installed extensions like nb_conda
			- or from user-built extensions
			
			notes:
				extensions live both in:
					- lib/site-packages
						(with an __init__.py directing jupyter)
					
					- Anaconda3/share/nbextensions/ 
					
				-> I can't dummy duplicate an extension yet
		
				
	 
			great rundown of everything to know about extending jupyter with examples:
			https://mindtrove.info/4-ways-to-extend-jupyter-notebook/
		
				-  https://forums.fast.ai/t/jupyter-notebook-enhancements-tips-and-tricks/17064/2
		
				- https://www.dataquest.io/blog/advanced-jupyter-notebooks-tutorial/
		
				- something about custom.js is where you can write your own js

		
		
		Examples of extension to scroll to running cell:					
			https://github.com/ipython-contrib/jupyter_contrib_nbextensions/pull/1384/files
			
			How to find the selected cell	from:https://github.com/jupyter/notebook/blob/b8b66332e2023e83d2ee04f83d8814f567e01a4e/docs/source/frontend_config.rst
		
			
		I like these answers to using IPython pakcage in python		
			https://stackoverflow.com/questions/12544056/how-do-i-get-the-current-ipython-jupyter-notebook-name
			
			Look at the paste cell method to find out how to insert cells on the fly.
	 
		
		Messages from the notebooks default behavior:
		
			the pop-up
			<div class="modal-footer"><button class="btn btn-default btn-sm btn-warning" data-dismiss="modal">Reload</button><button class="btn btn-default btn-sm" data-dismiss="modal">Cancel</button><button class="btn btn-default btn-sm btn-danger save-confirm-btn" data-dismiss="modal">Overwrite</button></div>
			
			Error message when merge fails:
			Unreadable Notebook: C:\Users\wsutt\Desktop\cpr\student\student-cpr\book1.ipynb NotJSONError('Notebook does not appear to be JSON: \'{\\n "cells": [\\n {\\n "cell_type": "m...')
			
	
	 
		12.15
		
		+ How to reload the notebook notes:
		
			%%javascript
			var nb_path = IPython.notebook.notebook_path;
			IPython.notebook.load_notebook('misc/books/Untitled.ipynb');
		
			https://stackoverflow.com/questions/12544056/how-do-i-get-the-current-ipython-jupyter-notebook-name
	
				How to go from js -> python within the notebook: Ipython.notebook.kernel.execute("a=1");
	 
		+ Random Jupyter Knowledge
		
			- %connect_info will give a way to connect a second notebook to connect to the same kernel:
				this can be useful for receiving cell pull requests from students in a second notebook.
				
		
		+ Relevant Code in Jupyter's static/:
		
			main.min.js in a downloaded page at line 45233:
		
			if (that._changed_on_disk_dialog !== null) {
                            // update save callback on the confirmation button
                            that._changed_on_disk_dialog.find('.save-confirm-btn').click(_save);
                            //Rebind Click Event on Reload
                            that._changed_on_disk_dialog.find('.btn-warning').click(function () {window.location.reload()});
                            // redisplay existing dialog
                            that._changed_on_disk_dialog.modal('show');
                        } else {
                          // create new dialog
                          that._changed_on_disk_dialog = dialog.modal({
                            notebook: that,
                            keyboard_manager: that.keyboard_manager,
                            title: i18n.msg._("Notebook changed"),
                            body: i18n.msg._("The notebook file has changed on disk since the last time we opened or saved it. "
                                  + "Do you want to overwrite the file on disk with the version open here, or load "
                                  + "the version on disk (reload the page)?"),
                            buttons: {
                                Reload: {
                                    class: 'btn-warning',
                                    click: function() {
                                        window.location.reload();
                                    }
                                },
							Cancel: {},
                                Overwrite: {
                                    class: 'btn-danger save-confirm-btn',
                                    click: function () {
                                        _save();
                                    }
                                },
                            }
							
		
		

		+ Trying to run load_notebook in console: (these were all failures)
		
			>IPython.Notebook.prototype.load_notebook()
						
				caught in debugger: static/notebook/js/notebook/js/notebook.js
				
				Notebook.prototype.load_notebook = function (notebook_path) {
					this.notebook_path = notebook_path;
				
				where:
				notebook_path = 'student/student-cpr/book1-fix.ipynb'
			
			>IPython.Notebook.prototype.load_notebook('student/student-cpr/book1-fix.ipynb')
			>requirejs("notebook/js/notebook").Notebook.prototype.load_notebook("student/student-cpr/book1-fix.ipynb")
			
			 $.ajax({
				  url: "/static/notebook/js/main.min.js",
				  dataType: "script",
				  success: true
				});
			$.ajax({
			  url: "/static/notebook/js/main.min.js?v=1bc4ae6ca8730320ff059b16de698691",
			  dataType: "script",
			  success: true
			});
			<script src="/static/notebook/js/main.min.js?v=1bc4ae6ca8730320ff059b16de698691" type="text/javascript" charset="utf-8"></script>
		
		12.14
		
		+ how to setup local git server:
		
		in remote/: >mkdir main
						>cd main
						>git init
						>git checkout -b dummy
			
			in student-cpr/ and teacher-cpr:
						>git remote add local /c/Users/wsutt/Desktop/cpr/remote/main
						
			from teacher-cpr/
						>git push local master
						(now, remote should be sync'd with teacher)
						
			to verify sync, in remote/main/:
						>git checkout master
						>ls  (should see all files)
						>git checkout dummy (need to switch back to enable pushing to master)
						
			now sync up student, in student-cpr:
						>git add .
						>git commit -m "add/committing everything tp allow pull"
						>git pull local master
						
		
		+ examples of git operations while notebook is live.
		
			"""
			error: Your local changes to the following files would be overwritten by merge:
				book1.ipynb
				Please commit your changes or stash them before you merge.
				Aborting
			"""
		
		+ how to clone from local? doesn't work as easily as adding a local remote
		
			-> you can just push to a newly init'd folder
		
		+ how do 
		
		+ how to push to a local repo:
			
			This one works:
			example-repo-branch
			in this one, we do:
				(in remote)>git checkout -b dummy
				(in local) >git push local-branch master
				-> now pushed changes are visible in remote once we:
				(in remote) >git checkout master
				but changes aren't visible in dummy branch
				
			
			This didn't really work:
			example-repo (turned to "bare" but files disappear, but log works)
			
			remote: error: refusing to update checked out branch: refs/heads/master
			remote: error: By default, updating the current branch in a non-bare repository
			remote: is denied, because it will make the index and work tree inconsistent
			remote: with what you pushed, and will require 'git reset --hard' to match
			remote: the work tree to HEAD.
			
			troubleshooting:	https://stackoverflow.com/questions/2816369/git-push-error-remote-rejected-master-master-branch-is-currently-checked
		
				in remote do: git config --bool core.bare true
				
			example-repo-branch
		
		12.12
		
		+ even without any actual changes to students, `git diff --stat` returns this...
			"""
			 warning: LF will be replaced by CRLF in book1.ipynb.
			 The file will have its original line endings in your working directory
			"""
			
			- but trying to commit that fails:			
				"""
				nothing to commit, working tree clean
				"""
		
		+ merging fails when student+teacher both make changes, and student's chnages are not committed.
		
				error: Your local changes to the following files would be overwritten by merge:
					book1.ipynb
				Please commit your changes or stash them before you merge.
				Aborting
				Updating 05085cf..e81cbeb
		
			also:
			
				Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
				
				? what is "fast-forwarding" ?
				
		+ Looks like student's branch get's stuck behind teacher's once he starts merging.
		
			"""
			Your branch is ahead of 'origin/master' by 3 commits.		
			"""
	
	
	
	
	
	
	
	